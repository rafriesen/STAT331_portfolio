---
title: "STAT 331 Portfolio"
author: "Rachel Friesen"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an A.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv`

```{r wd-1-csv}

# Lab 5
surveys <- read_csv(here('labs', 'lab_5', 'surveys.csv'))
```

-   `xlsx`

```{r wd-1-xlsx}
# Revised - switched to xlsx instead of read_excel()

# Week 2 Practice Activity
read_xlsx("Ages_Data/ages.xlsx")
```

-   `txt`

```{r wd-1-txt}
# Week 2 Practice Activity
read_delim("Ages_Data/ages_tab.txt", delim = "\t")
```

**WD-2: I can select necessary columns from a dataset.**

Lab 3 Challenge

```{r wd-2}
# Lab 3 Challenge
challenge_1 <- hiphop |>
  distinct(subj, .keep_all = TRUE) |>
   select(subj:ethnic, intl:unclassifiable) |>
  group_by(sex) |>
  summarize(across(intl:unclassifiable, ~ mean(.x, na.rm = TRUE)))
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-3-numeric}

# Lab 3 Question 14
hiphop_clean |> 
  distinct(subj, .keep_all = TRUE) |> 
  filter(sex == "Male", 
         bieber == 5, 
         city < 60000, 
         ethnic == "white", 
         age %in% 17:23) |>
  select(subj)
```

-   character -- specifically a string

```{r wd-3-string}

# Practice Activity 5 Regex
message |> 
  filter(str_detect(Word, pattern = "^m"))
```

-   factor

```{r wd-3-factor}

# Lab 3 Question 14
hiphop_clean |> 
  distinct(subj, .keep_all = TRUE) |> 
  filter(sex == "Male", 
         bieber == 5, 
         city < 60000, 
         ethnic == "white", 
         age %in% 17:23) |>
  select(subj)
```

-   date

```{r wd-3-date}

# Practice Activity 5 Lubridate
suspects <- suspects %>% 
  mutate(iceland_time = with_tz(Time.Spotted, tzone = "UTC")) %>%
  filter(pm(iceland_time))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   numeric

```{r wd-4-numeric}

# Lab 3 Question 11
hiphop_clean <- hiphop_clean |> 
  mutate(
    across(
      c(sex, ethnic),
      as.character)) |>
  mutate(
    across(
      c(age, familiarity),
      as.numeric))
```

-   character -- specifically a string

```{r wd-4-string}

# Lab 7, Question 2.2
missing_data <- surveys |> 
  filter(is.na(weight)) |> 
  mutate(section_trip = str_c(section,' ', trip))
```

-   factor

```{r wd-4-factor}

# Lab 5 Question 3
ggplot(data = surveys,
       mapping = aes(
         y = fct_collapse(day_of_week,
                          "weekend" = c("Mon", "Tue", "Wed", "Thu", "Fri"),
                          "weekday" = c("Sat", "Sun")))) +
  geom_histogram(stat = "count") +
  theme(axis.title.y = element_blank()) +
  labs(title = "Number of Rodents Captured on Weekends vs. Weekdays",
       )
```

-   date

```{r wd-4-date}

# Practice Activity 5 Lubridate
suspects <- suspects %>%
  mutate(day = day(Time.Spotted)) %>% 
  filter(day %in% (c(22:24)))
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()`

```{r wd-5-left}

# Example from volunteer data management side project
summarize_event <- function(file, matrix) {
  
file <- file |> 
  mutate(date = openxlsx::convertToDate(date)) |> 
  drop_na(source_type) |> 
  pivot_longer(cols = (!(source_type:unk_num)),
               values_to = "member",
               values_drop_na = TRUE) |> 
  clean_name(member) |> 
  semi_join(matrix, by = "first_last") |> 
  left_join(master_relations, by = "first_last", multiple = "first") |> 
  select(first_last, member, Family, source_type:file_name) |> 
  group_by(event_detail, date) |> 
  count(Family)

return(file)
}
```

-   `right_join()`

```{r wd-5-right}

# Example from volunteer data management side project
matrix_1984_fill <- file_1984_clean |> 
  right_join(matrix_1984, by = "first_last") |> 
  mutate(total = rowSums(across(where(is.numeric)), na.rm=TRUE)) |> 
  select(first_last, member, total, everything())
```

-   `inner_join()`

```{r wd-5-inner}

# Preview activity 11
inner_join(prof_info, prof_course)
```

-   `full_join()`

```{r wd-5-full}

# Preview activity 11
full_join(prof_info, prof_course)
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r wd-6-semi}

# Lab 4 Question 3
avocado_clean %>% 
  semi_join(y = regions_major, by = "region")  %>% 
  filter(year == 2017,  type == "organic") %>% 
  group_by(region) %>%
  summarize(small_sum = sum(small)) %>% 
  slice_max(order_by = small_sum, n = 1) %>% 
  pull(region)

```

-   `anti_join()`

```{r wd-6-anti}

# Lab 4 Question 2
regions_metro <- avocado_clean %>% 
  anti_join(y = regions_all, by = "region") %>% 
  select(region) %>%
  unique()
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r wd-7-long}

# Lab 4 Question 7
avocado_clean_Q7 <- avocado_clean_Q6 %>% 
  pivot_longer(cols = small:extra_large, 
               names_to = "size", 
               values_to = "sales") %>%
  mutate(size = factor(size, levels = c("small", "large", "extra_large"))) %>%
  group_by(region, type, size) %>% 
  summarize(mean_sales = mean(sales))
```

-   `pivot_wider()`

```{r wd-7-wide}

# Lab 4 Question 6
avocado_clean_Q6 %>% 
  group_by(region, type) %>%
  summarize(MedPrice = median(AveragePrice))  %>% 
  pivot_wider(names_from = type, values_from = MedPrice) %>% 
  mutate(med_difference = organic - conventional) %>% 
  ungroup() %>% 
  slice_max(order_by = med_difference, n = 1)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignment:

Lab 7 and Lab 8

**R-2: I can write well documented and tidy code.**

-   Example 1

```{r r-2-1}

# Lab 4 Question 7
avocado_clean_Q7 <- avocado_clean_Q6 %>% 
  pivot_longer(cols = small:extra_large, 
               names_to = "size", 
               values_to = "sales") %>%
  mutate(size = factor(size, levels = c("small", "large", "extra_large"))) %>%
  group_by(region, type, size) %>% 
  summarize(mean_sales = mean(sales))
```

-   Example 2

```{r r-2-2}

# Lab 4 Question 3
avocado_clean %>% 
  semi_join(y = regions_major, by = "region")  %>% 
  filter(year == 2017,  type == "organic") %>% 
  group_by(region) %>%
  summarize(small_sum = sum(small)) %>% 
  slice_max(order_by = small_sum, n = 1) %>% 
  pull(region)
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1

```{r r-3-1}

# Lab 3 Question 11
hiphop_clean <- hiphop_clean |> 
  mutate(
    across(
      c(sex, ethnic),
      as.character)) |>
  mutate(
    across(
      c(age, familiarity),
      as.numeric))
```

-   Example 2

```{r r-3-2}

# Lab 7 Question 3.1
rescale_01 <- function(x) {
    
  stopifnot(is.numeric(x),
            length(x) > 1)
  
  rng <- range(x, na.rm = TRUE)
  num <- (x - rng[1])
  denom <- (rng[2] - rng[1])
  
  return(num/denom)
}
```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   numeric variables

```{r dvs-1-num}

# Lab 2 Question 4
 ggplot(data = surveys, 
        mapping = aes(x = weight, 
                      y = hindfoot_length)) +  
        geom_point()
```

-   numeric variables and categorical variables

```{r dvs-2-num-cat}

# Lab 4 Question 7
ggplot(data = avocado_clean_Q7, 
       mapping = aes(x = region,
                     y = mean_sales,
                     fill = size)) +
  geom_bar(position = "fill", stat = "identity") +
  facet_wrap(~ type) +
  labs(x = "Region of CA", 
       y = "Proportion of Mean Avocados Sold",
       fill = "Avocado Size") +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  scale_fill_manual(values = c("lightblue2", "steelblue3", "darkolivegreen3"),
                    labels = c("Small", "Large", "Extra Large"))
```

-   categorical variables

```{r dvs-2-cat}

# Lab 7 Question 2.2
ggplot(data = missing_data,
       mapping = aes(x = year, fill = section_trip)) +
  geom_bar() +
  labs(title = "Count of missing fish weight data", 
       y = "", 
       x = "Year", 
       fill = "River Section and Trip")
```

-   dates

```{r dvs-2-date}

# Lab 5 Question 2
surveys |> 
  group_by(genus, year) |> 
  summarize(mean_weight = mean(weight)) |>
  ungroup()  |>
ggplot(mapping = aes(x = year,
                  y = mean_weight,
                  color = fct_reorder(.f = genus, 
                                      .x = mean_weight, 
                                      .desc = TRUE ))) +
  geom_line() +
  scale_color_discrete(name = "Rodent Genus") +
  theme(axis.title.y = element_blank()) +
  labs(title = "Average Rodent Weight (in grams) Over Time",
       x = "Year")
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1

```{r dvs-2-1}

# Lab 5 Question 1

# Revised 3/19/2022 - Modified transparency and fixed axes labels
ggplot(data = surveys,
       mapping = aes(x = weight, 
                      y = fct_reorder(
                        .f = species, 
                        .x = weight, 
                        .fun = 'median',
                        ))) +  
        geom_jitter(color = "darkseagreen", alpha = .1) +
        geom_boxplot(outlier.shape = NA, alpha = 0) +
        labs(x = "Weight (g)",
             title = "Rodent Species Weights",
             y = "")
```

-   Example 2

```{r dvs-2-2}

# Lab 5 Question 3

# Revised 3/19/2022 Fixed axis labels, switched to geom_bar
ggplot(data = surveys,
       mapping = aes(
         y = fct_collapse(day_of_week,
                          "weekend" = c("Mon", "Tue", "Wed", "Thu", "Fri"),
                          "weekday" = c("Sat", "Sun")))) +
  geom_bar() +
  labs(title = "Number of Rodents Captured on Weekends vs. Weekdays",
       y = "")
```

**DVS-3: I show creativity in my visualizations**

-   Example 1

```{r dvs-3-1}

# Lab 4 Question 7
ggplot(data = avocado_clean_Q7, 
       mapping = aes(x = region,
                     y = mean_sales,
                     fill = size)) +
  geom_bar(position = "fill", stat = "identity") +
  facet_wrap(~ type) +
  labs(x = "Region of CA", 
       y = "Proportion of Mean Avocados Sold",
       fill = "Avocado Size") +
  scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
  scale_fill_manual(values = c("lightblue2", "steelblue3", "darkolivegreen3"),
                    labels = c("Small", "Large", "Extra Large"))
```

-   Example 2

```{r dvs-3-2}

# Lab 4 Challenge
# Revised version -- switched to Cleveland dot plot per your advice!

# source: https://uc-r.github.io/cleveland-dot-plots
ggplot(data = avocado_clean_chal,
       mapping = aes(y = region,
                     x = value)) +
  geom_line(aes(group = region)) +
  geom_point(aes(color = cost_type)) +
  labs(title = "Avocado Toast Did Not Eat My Mortgage",
       x = "Cost ($)",
       y = "",
       fill = "") +
  scale_color_manual(values = c("darkolivegreen3", "steelblue3"))
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1

```{r dvs-4-1}

# Lab 3 Question 11
hiphop_clean |> 
  filter(age < 20) |> 
  group_by(word) |> 
  summarize(mean = mean(familiarity)) |> 
  slice_max(order_by = mean, n = 5) 
```

-   Example 2

```{r dvs-4-2}

#Lab 3 Question 6
hiphop_clean |>
  distinct(word) |>
  count()
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r dvs-5-1}

# Lab 4 Question 6
avocado_clean_Q6 %>% 
  group_by(region, type) %>%
  summarize(MedPrice = median(AveragePrice))  %>% 
  pivot_wider(names_from = type, values_from = MedPrice) %>% 
  mutate(med_difference = organic - conventional) %>% 
  ungroup() %>% 
  slice_max(order_by = med_difference, n = 1)
```

-   Example 2

```{r dvs-5-2}

# Lab 9 Summarize Allisons
allison |> 
  group_by(State, Sex) |> 
  summarize(Count = sum(Count)) |>
  ungroup() |> 
  pivot_wider(names_from = Sex,
              values_from = Count,
              values_fill = 0)
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1

```{r dvs-6-1}

# Lab 9 Challenge Create Data Preview
# interactive preview with DT
DT::datatable(names)

```

-   Example 2

```{r dvs-6-2}

# Lab 9 Challenge Allan Table

allan_m |> 
  filter(Year == 2000,
         State %in% c("CA", "PA")) |>
  group_by(State) |> 
  mutate(prop = Count / sum(Count)) |> 
  select(-c(Year, Sex, Count)) |> 
  pivot_wider(names_from = Name,
              values_from = prop,
              values_fill = 0) |>
  ungroup() |> 
  gt() |> 
  tab_header(title = "Percent of Babies Named 'Alan'",
             subtitle = "Comparing California and Pennsylvania") |> 
  fmt_percent(columns = 2:4, decimals = 2) |> 
  opt_align_table_header(align = c("left"))  |> 
  cols_width(everything()~ px(100))
```

**DVS-7: I show creativity in my tables.**

-   Example 1

```{r dvs-7-1}

# Lab 4 Question 4
avocado_clean %>% 
  separate(col = "Date", sep = "-", into = c("year", "month", "date")) %>%
  group_by(month) %>% 
  summarise(mean = mean(`total_volume`)) %>%
  slice_max(order_by = mean)
```

-   Example 2

```{r dvs-7-2}

# Lab 9 Challenge Summarize the Number of Allisons

allison |> 
  group_by(State, Sex) |> 
  summarize(Count = sum(Count)) |>
  ungroup() |> 
  pivot_wider(names_from = Sex,
              values_from = Count,
              values_fill = 0) |> 
  gt() |> 
  cols_label(F = "Female",
             M = "Male") |> 
  tab_header(title = "Frequency of Babies Named 'Allison' by U.S. State") |> 
  opt_align_table_header(align = c("left")) |> 
  cols_width(everything()~ px(100))
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call

```{r pe-1-one-call}

# Lab 4 Question 2
avocado_clean <- avocado %>% 
  rename(small = "4046", 
         large = "4225",
         extra_large = "4770",
         total_volume = "Total Volume")
```

-   `across()`

```{r pe-1-across}

# Lab 3 Question 11
hiphop_clean <- hiphop_clean |> 
  mutate(
    across(
      c(sex, ethnic),
      as.character)) |>
  mutate(
    across(
      c(age, familiarity),
      as.numeric))
```

-   `map()` functions

```{r pe-1-map-1}

# Lab 8 Sing the Whole Song
xmas_song <- function(n){
  song <- map_chr(.x = 1:12,
                  .f = ~ sing_day(xmas2, .x, Full.Phrase)) 
  
  song <-glue::glue("{song}")
    
  return(song)
}

xmas_song(xmas2)
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1

```{r pe2-1}

# Lab 8 Sing a Line for One Day
sing_day <- function(dataset, line, phrase_col){
  
# Setup the intro line
# Challenge Option 2 - New Lines for Gifts
  num_word <- ordinal(line)
  
  intro <- glue::glue("On the {num_word} day of Christmas, my true love gave to me:
                      
                      ")
  
# Sing the gift phrases
phrases <- dataset |>
  pull( {{phrase_col}} )

# Challenge Option 2 - New Lines for Gifts  
phrases <- str_c(phrases, "\n")

# Add "and" for all lines except the 1st line
phrases[1] <- if_else(line == 1,
                 true =  phrases[1],
                 false = str_c("and ", phrases[1]))

# reverse order and collapse string into length one
phrases <- phrases [1:line] |> 
  rev() |> 
  str_flatten()

## put it together
 return(glue::glue("{intro} {phrases}
                  "))

}  
```

-   Example 2

```{r pe2-2}

# Lab 8 Sing Phrases
make_phrase <- function(day, num_word, item, verb, adjective, location) {
  
## Step 1: Replace NAs with blank strings
  verb <- str_replace_na(verb, '')
  adjective <- str_replace_na(adjective, '')
  location <- str_replace_na(location, '')
  
  ## Step 2: If the day is larger than 1, the items need pluralized! 
  item <- if_else(condition = day > 1,
                 true = pluralize_gift(item),
                 false = item)
  
  ## Step 3: If the day is 1, you need to add an "a" or "an" before the gift 
  num_word <- if_else(condition = day == 1,
                 true = str_replace(num_word, 'one', 'a'),
                 false = num_word)
  
  ## Step 4: Glue all of the pieces together to make a phrase! 
 return(
   glue::glue(
   {num_word},' ', {adjective},' ', {item},' ', {verb}, ' ', {location}
   )
 )
}
```

**PE-3:I can use iteration to reduce repetition in my code.**

-   `across()`

```{r pe-3-across}

# Lab 7 Question 2.1
surveys |> 
  summarise(across(.cols = trip:species, 
                   ~ sum(is.na(.x))
                   ))
```

-   `map()` functions (Provide 2 Examples)

```{r pe-3-map-1}

# Lab 8 Sing Phrases
xmas2 <- xmas %>%
  mutate(Full.Phrase = pmap_chr(.l = list(Day, Number, Gift.Item, Verb, Adjective, Location),
                                .f = make_phrase),
         Full.Phrase = str_squish(Full.Phrase)
         )
```

```{r pe-3-map-2}

# Lab 8 Sing the Whole Song
xmas_song <- function(n){
  song <- map_chr(.x = 1:12,
                  .f = ~ sing_day(xmas2, .x, Full.Phrase)) 
  
  song <-glue::glue("{song}")
    
    
    
  
  return(song)
}

xmas_song(xmas2) 
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1

```{r pe-4-1}

# Lab 3 Challenge
challenge_1 <- hiphop |>
  distinct(subj, .keep_all = TRUE) |>
   select(subj:ethnic, intl:unclassifiable) |>
  group_by(sex) |>
  summarize(across(intl:unclassifiable, ~ mean(.x, na.rm = TRUE)))
```

-   Example 2

```{r pe-4-2}

# Lab 4 Question 6
avocado_clean_Q6 %>% 
  group_by(region, type) %>%
  summarize(MedPrice = median(AveragePrice))  %>% 
  pivot_wider(names_from = type, values_from = MedPrice) %>% 
  mutate(med_difference = organic - conventional) %>% 
  ungroup() %>% 
  slice_max(order_by = med_difference, n = 1)
```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r dsm-1-1}

# Practice Activity 9.2 
fake_data <- tibble(
  weight = rnorm(n = 100, mean = 4.6, sd = .8)
)
```

-   Example 2

```{r dsm-1-2}

# Practice Activity 9.2
set.seed(1957)

music_man <- function(n_tromb, n_cor, n_reed){
  
  trombones <- rnorm(n_tromb, mean = 4.6, sd = .8)
  cornets <- runif(n_cor, min = 1.5, max = 3.5)
  reeds <- rchisq(n_reed, df = 4)
  
  return(sum(trombones, cornets, reeds))
  
}

my_weights <- map_dbl(.x = 1:1000, 
                      .f = ~ music_man(n_tromb = 76, n_cor = 110, n_reed = 1035)
                      ) 

sum(my_weights<4532)
```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1

```{r dsm-2-1}

# Lab 9 Modeling the Number of Allisons
allison_lm <- lm(Count ~ Year, data = allison_f)
broom::tidy(allison_lm)
```

-   Example 2

```{r dsm-2-2}

# Practice Activity 9
my_model <- animal |>
  lm(weight_after ~ weight_before, data = _)

# plot residuals
my_model |> 
  broom::augment() |> 
  ggplot(mapping = aes(y = .resid, x = .fitted)) +
  geom_point()
```

## Revising My Thinking

I have completed multiple revisions throughout the quarter and have tried to incorporate "lessons learned" as I work on successive assignments throughout the quarter. I incorporated feedback and updated the Challenge 4 plot so that it is now a Cleveland Dot Plot instead of a bar plot.

## Extending My Thinking

I extended my thinking by looking up external resources for Challenge 4 and creatively framing my analysis. I have been applying what I've been learning as I clean up data for my research project and a side volunteer project.

## Peer Support & Collaboration

![](images/Screenshot%202023-02-16%20at%2010.06.39%20AM.png){width="170"}
